#include"exam_science.h"
#include"utility.h"
#include<random>
using namespace std;


//物理の問題を作成する

QuestionList CreatePhysicsExam()
{
	QuestionList questions;
	questions.reserve(10);
	random_device rd;

	{
		//等速直線運動
		constexpr int divisors[] = { 1,2,3,4,5,6,10,13,15,20,30,60 };
		int i = uniform_int_distribution<>(0, size(divisors) - 1)(rd);
		int v = uniform_int_distribution<>(0, 10)(rd)*60 / divisors[i];
		int t = uniform_int_distribution<>(0, 10)(rd) * divisors[i];
		questions.push_back({
			"時速" + to_string(v) + "kmで移動する車がある\nこの車が" + to_string(v * t / 60) +
			"km移動するのにかかる時間を分単位で求めよ",
			to_string(t) });

		int i = uniform_int_distribution<>(0, size(divisors) - 1)(rd);
		int v = uniform_int_distribution<>(0, 10)(rd) * 60 / divisors[i];
		int t = uniform_int_distribution<>(0, 10)(rd) * divisors[i];
		questions.push_back({
			"ある車" + to_string(v) + "kmまで離れた地点まで移動するのに" + to_string(t) +
			"分かかった\nこの車の平均時速を求めよ",
			to_string(t) });

	}//等速直線移動
	{
		//等速速度直線運動
		//公式:v = v0 +atを使って解く問題
		int v0 = uniform_int_distribution<>(	1,10)(rd);
		int a = uniform_int_distribution<>(1, 5)(rd);
		int t = uniform_int_distribution<>(1, 20)(rd);
		questions.push_back({
			"秒速" + to_string(v0) + "mで移動していた車が進行方向に大きさ" + to_string(a) +
			"m/sで等速加速度直線運動を始めた\n" + to_string(t) + "秒後の速度をm/s単位で求めよ",
			to_string(v0 + a + t) });
		
	

	//公式:x = v0t+1/2*at^2を使って解く問題
		v0 = uniform_int_distribution<>(5, 20)(rd);//初速
		a = uniform_int_distribution<>(1, 5)(rd)*2;//加速度
		t = uniform_int_distribution<>(1, 10)(rd);//移動時間
		questions.push_back({
			"秒速" + to_string(v0) + "mで移動してた車が進行方向に大きさ" + to_string(a) +
			"m/sで等加速度直線運動を始めた、\n加速を始めてから" + to_string(t) +
			"秒後までに移動した距離をm単位で求めよ",
			to_string(v0 * t + a * t * t / 2) });

		//公式：v^2-v0^2 = 2axを使って解く問題
		a = uniform_int_distribution<>(1,5)(rd)*2;//加速度
		t = uniform_int_distribution<>(1, 10)(rd);//移動時間
		v0 = -a * t;//初速
		questions.push_back({
			"秒速" + to_string(v0) + "mで移動してた車がブレーキをかけたところ" + 
			to_string(v0*t+a*t*t/2) +"m進んで停止した\n"+
			"ブレーキの加速度をm/s^2単位で求めよ",
			to_string(a)});
	}//等速加速度直線運動

	{//重力加速度
		int t = uniform_int_distribution<>(1, 10)(rd);//移動速度
		int x = 98 * t * t / 2;//10倍することで小数点以下第一位までを整数としてあらわす
		string answer = to_string(x / 10);//整数部を文字列化
		if (x % 10) {
			//少数部がある場合は少数部を文字列化
			answer += '.';
			answer += '0' + x % 10;
		}
		questions.push_back({
			"重力加速度を9.8m/s^2とする\n十分に高い位置から物体を静かに落とすと物体は" +
			to_string(t) + "秒間でＸｍ落下する\n" +
			"Ｘの値を少数点以下第一位まで求めよ(空気抵抗はないものとする)",
			answer });

		int v0 = uniform_int_distribution<>(1, 10)(rd);
		t = uniform_int_distribution<>(1, 10)(rd);
		int v = v0 * 10 - 98 * t;
		answer.clear();
		if (v < 0) {
			v = -v;
			answer = '-';
		}
		answer += to_string(v / 10);
		if (v % 10) {
			answer += '.';
			answer += '0' + v % 10;
		}
		questions.push_back({
			"重力加速度を9.8m/s^2とする\n初速" +
			to_string(v0) + "m/sで物体を鉛直に投げ上げた時、" +to_string(t)+
			"秒後の物体の速度はXm/sである\n"+
			"Xの値を小数点以下第一位まで求めよ(空気抵抗はないものとする)",
			answer });

	}//重力加速度

	{//浮力
		int s = uniform_int_distribution<>(5, 20)(rd); //底面積
		int h = uniform_int_distribution<>(2, 10)(rd);//高さ
		int v = s * h + 5; //体積を求め、四捨五入のため5を加える
		string answer = to_string(v / 100);//整数部分を文字列に変換
		v /= 10; //小数点以下第二位以下に当たる部分を捨てる
		if (v % 10)//小数点以下第一位が０以外なら、少数部を文字列に加える
		{
			answer += '.';
			answer += '0' + v % 10;
		}
		questions.push_back({
			"質量100gの物体に働く重力を１Nとする。\n底面積" + to_string(s) + "cm^2,高さ" +
			to_string(h) + "cmの円柱を完全に水中に沈めた\n" +
			"この時、この円柱に働く浮力はXニュートンである\n" +
			"Xの値を小数点第二位以下を四捨五入して求めよ",
			answer });

	}//浮力

	return questions;
};